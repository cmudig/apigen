
class Mark {
  constructor(private type:  | { type: }) {}
  
}

export function mark(type:  | { type: }){
  return new Mark(type);
}

class X {
  constructor(private field?: string, private type?: "quantitative" | "ordinal") {}
  
}

export function x(field?: string, type?: "quantitative" | "ordinal"){
  return new X(field, type);
}

class Y {
  constructor(private field?: string, private type?: "quantitative" | "ordinal") {}
  
}

export function y(field?: string, type?: "quantitative" | "ordinal"){
  return new Y(field, type);
}

class Color {
  constructor(private field?: string, private type?: "quantitative" | "ordinal", private value?: string) {}
  
}

export function color(field?: string, type?: "quantitative" | "ordinal", value?: string){
  return new Color(field, type, value);
}

class Encoding {
  constructor(private x?: X, private y?: Y, private color?: Color) {}
  
}

export function encode(x?: X, y?: Y, color?: Color){
  return new Encoding(x, y, color);
}

class Spec {
  constructor(private mark: Mark, private data: string, private encode: Encoding) {}
  
}

export function spec(mark: Mark, data: string, encode: Encoding){
  return new Spec(mark, data, encode);
}

export function toSpec(obj: any){
    return obj;
  }